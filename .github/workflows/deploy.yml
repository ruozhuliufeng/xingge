name: Deploy to Maven Central

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  JAVA_VERSION: '8'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Bump patch version
        run: |
          mvn build-helper:parse-version versions:set \
            -DnewVersion=\"${{ github.run_number }}\" \
            -DgenerateBackupPoms=false

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pom.xml
          git commit -m "ci: bump version"
          git push origin HEAD:master

  deploy:
    name: Deploy to Maven Central
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Configure Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.SONATYPE_USERNAME }}</username>
                <password>${{ secrets.SONATYPE_PASSWORD }}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>release</id>
                <properties>
                  <gpg.keyname>${{ secrets.GPG_KEY_ID }}</gpg.keyname>
                  <gpg.passphrase>${{ secrets.GPG_PASSPHRASE }}</gpg.passphrase>
                </properties>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>release</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: Configure GPG for CI (loopback mode)
        run: |
          mkdir -p ~/.gnupg
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          chmod 600 ~/.gnupg/*

      - name: Import GPG key and unlock
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 -d > /tmp/private.key
          gpg --batch --yes --import /tmp/private.key
          rm -f /tmp/private.key
          echo "$GPG_KEY_ID:6:" | gpg --import-ownertrust
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 \
            --sign --default-key "$GPG_KEY_ID" --output /dev/null <<< "unlock"
          gpg --list-secret-keys --keyid-format LONG

      - name: Deploy to Maven Central
        run: |
          mvn clean deploy -P release -DskipTests \
            -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" \
            --batch-mode --no-transfer-progress

      - name: Get project version
        id: get_version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a v${{ steps.get_version.outputs.version }} -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ 项目已成功部署到 Maven 中央仓库！"
          echo "📦 版本: ${{ steps.get_version.outputs.version }}"
          echo "🔗 仓库地址: https://central.sonatype.com/artifact/tech.msop/xingge"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ 部署失败，请检查日志并修复问题。"
